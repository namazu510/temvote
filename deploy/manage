#!/bin/bash
set -eu

LOG_FILE=/tmp/.deploy.log
CONF=/etc/deploy
DEPLOY=/srv/deploy
DEPLOY_TAR_GZ=/srv/deploy.tar.gz
JOURNAL_CURSOR=/srv/deploy.journal.cursor

# configには、下記のファイルが定義されていなければならない。また、環境変数を上書きしてはならない
# SERVER
# SECRET_KEY
# HOSTID
if [ -f /etc/deploy/config ]; then
    . /etc/deploy/config
fi


function error() {
    echo "$@" >&2
    exit 1
}

# check env
[ -z "${SERVER:-}" ]     && error 'ERROR: "$SERVER" must not be empty.'
[ -z "${SECRET_KEY:-}" ] && error 'ERROR: "$SECRET_KEY" must not be empty.'
[ -z "${HOSTID:-}" ]     && error 'ERROR: "HOSTID" must not be empty.'


function send() {
    TAG=$1
    URL=$SERVER/metrics
    curl -SsL -X POST --data-binary @- \
        -H "X-SECRET: $SECRET_KEY" \
        -H "X-HOSTID: $HOSTID" \
        -H "X-TAG: $TAG" \
        -H 'Content-Type: text/plain' \
        "$URL"
}

function get_file() {
    URL=$SERVER/deploy/$1
    curl -SsL "$URL" \
        -H "X-SECRET: $SECRET_KEY" \
        -H "X-HOSTID: $HOSTID"
}

function send_logs() {
    cat $CONF/version |send version
    ip a |send ip
    docker ps |send docker-ps
    (systemctl status systemd-timesyncd; echo; timedatectl status) |send systemd-timesyncd

    opt=()
    if [ -s $JOURNAL_CURSOR ]; then
        opt=("--after-cursor=$(cat $JOURNAL_CURSOR)")
    fi
    journalctl --show-cursor "${opt[@]}" |tee \
        >(tail -n1 |sed 's/^-- cursor: //' >$JOURNAL_CURSOR) \
        >(send journal-log) \
        >/dev/null
}

function deploy() {
    if ! cmp <(get_file latest_version) $CONF/version; then
        # 最新版では無いことが確認できたので、デプロイスクリプトを実行
        rm -rf $DEPLOY
        get_file deploy.tar.gz >$DEPLOY_TAR_GZ
        mkdir -p $DEPLOY
        tar xf $DEPLOY.tar.gz -C $DEPLOY
        pushd $DEPLOY
        (
            # デプロイに失敗したら、スクリプトを停止させる。
            set -o pipefail
            (./deploy.sh 2>&1) | send deploy
        )
        popd
    fi
}

"$@" &>$LOG_FILE || send error <$LOG_FILE
rm $LOG_FILE
